// <auto-generated />
using System;
using GreenHouse.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GreenHouse.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20191019140106_DefaultValuesUpdate")]
    partial class DefaultValuesUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GreenHouse.Core.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasDefaultValue("User");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("GreenHouse.Core.Models.Contributor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastUpdated");

                    b.Property<Guid>("ReportId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("GreenHouse.Core.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("FinishedAt");

                    b.Property<bool>("IsScheduled");

                    b.Property<DateTime>("ReportedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2019, 10, 19, 14, 1, 6, 312, DateTimeKind.Utc).AddTicks(3104));

                    b.Property<string>("State")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(40)")
                        .HasDefaultValue("InProgress");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("GreenHouse.Core.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FinishDate");

                    b.Property<Guid>("ReportId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("GreenHouse.Core.Models.UserFriend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FriendId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("GreenHouse.Core.Models.Contributor", b =>
                {
                    b.HasOne("GreenHouse.Core.Models.Report", "Report")
                        .WithMany("Contributors")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GreenHouse.Core.Models.Report", b =>
                {
                    b.HasOne("GreenHouse.Core.Models.Account", "Account")
                        .WithMany("UserReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GreenHouse.Core.Models.Schedule", b =>
                {
                    b.HasOne("GreenHouse.Core.Models.Report", "Report")
                        .WithOne("Schedule")
                        .HasForeignKey("GreenHouse.Core.Models.Schedule", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GreenHouse.Core.Models.UserFriend", b =>
                {
                    b.HasOne("GreenHouse.Core.Models.Account", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
